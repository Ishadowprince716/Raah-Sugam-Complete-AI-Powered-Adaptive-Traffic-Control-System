openapi: 3.0.3
info:
  title: Raah-Sugam API
  description: |
    AI-Powered Adaptive Traffic Control System API
    
    This API provides endpoints for traffic data ingestion, intersection management,
    real-time telemetry, and system control for the Raah-Sugam smart traffic system.
    
    ## Features
    - Real-time traffic data ingestion from edge devices
    - Intersection state management and control
    - Emergency vehicle preemption
    - Historical analytics and reporting
    - WebSocket support for real-time updates
    
    ## Authentication
    Most endpoints require JWT authentication. Include the token in the Authorization header:
    ```
    Authorization: Bearer <jwt-token>
    ```
  version: 1.0.0
  contact:
    name: Raah-Sugam Team
    email: raah.sugam.team@gmail.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.raah-sugam.in
    description: Production server

tags:
  - name: Health
    description: System health and monitoring endpoints
  - name: Authentication
    description: User authentication and authorization
  - name: Ingestion
    description: Traffic data ingestion from edge devices
  - name: Intersections
    description: Intersection management and control
  - name: Analytics
    description: Historical data and analytics
  - name: Events
    description: System events and alerts

paths:
  /healthz:
    get:
      tags: [Health]
      summary: Health check endpoint
      description: Returns the current health status of the API server
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  timestamp:
                    type: string
                    format: date-time
                  uptime:
                    type: number
                    description: Server uptime in seconds
                  version:
                    type: string
                    example: "1.0.0"
                  environment:
                    type: string
                    example: production
                  services:
                    type: object
                    properties:
                      database:
                        type: string
                        example: connected
                      websocket:
                        type: string
                        example: active
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /metrics:
    get:
      tags: [Health]
      summary: Prometheus metrics endpoint
      description: Returns Prometheus-formatted metrics for monitoring
      responses:
        '200':
          description: Metrics data
          content:
            text/plain:
              schema:
                type: string
                example: |
                  # HELP http_requests_total Total number of HTTP requests
                  # TYPE http_requests_total counter
                  http_requests_total{method="GET",route="/healthz",status_code="200"} 42

  /api/v1/auth/login:
    post:
      tags: [Authentication]
      summary: User login
      description: Authenticate user and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username:
                  type: string
                  example: operator
                password:
                  type: string
                  example: password123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT authentication token
                  user:
                    $ref: '#/components/schemas/User'
                  expiresIn:
                    type: string
                    example: "24h"
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/ingest/detections:
    post:
      tags: [Ingestion]
      summary: Ingest traffic detection data
      description: |
        Receive real-time traffic detection data from edge devices.
        This endpoint accepts high-frequency vehicle detection data including
        counts, queue lengths, and emergency vehicle detection.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DetectionData'
            example:
              intersectionId: "polytechnic-5way"
              approachId: "north"
              timestamp: "2025-09-25T15:30:00Z"
              vehicleCounts:
                car: 12
                bus: 1
                truck: 2
                twoWheeler: 18
                bicycle: 3
              queueLengthMeters: 85.3
              avgWaitSeconds: 42.1
              fps: 22.5
              latencyMs: 125
              emergencyDetected: false
      responses:
        '201':
          description: Detection data ingested successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: Detection record ID
                  timestamp:
                    type: string
                    format: date-time
                  processed:
                    type: boolean
                    example: true
        '400':
          description: Invalid detection data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/events/preemption:
    post:
      tags: [Events]
      summary: Report emergency preemption event
      description: Report emergency vehicle preemption event
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [intersectionId, timestamp, direction, reason, durationSeconds]
              properties:
                intersectionId:
                  type: string
                  example: "polytechnic-5way"
                timestamp:
                  type: string
                  format: date-time
                direction:
                  type: string
                  enum: [north, south, east, west, northeast]
                  example: "eastbound"
                reason:
                  type: string
                  enum: [ambulance, fire, police]
                  example: "ambulance"
                durationSeconds:
                  type: integer
                  minimum: 1
                  example: 25
      responses:
        '201':
          description: Preemption event recorded
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  status:
                    type: string
                    example: "recorded"

  /api/v1/intersections/{id}/state:
    get:
      tags: [Intersections]
      summary: Get intersection current state
      description: Returns current signal state and traffic conditions
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: polytechnic-5way
      responses:
        '200':
          description: Current intersection state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntersectionState'
              example:
                intersectionId: "polytechnic-5way"
                phase: "N-S through"
                remainingSeconds: 17
                queues:
                  north: 82
                  south: 35
                  east: 61
                  west: 44
                  northEast: 27
                throughputPerMin: 63
                mode: "auto"
                controllerStatus: "active"
                lastUpdated: "2025-09-25T15:30:00Z"

  /api/v1/intersections/{id}/mode:
    post:
      tags: [Intersections]
      summary: Change intersection control mode
      description: |
        Change the traffic signal control mode for an intersection.
        Available modes:
        - **auto**: RL-based adaptive control
        - **heuristic**: Max-pressure algorithm
        - **fixed**: Traditional fixed-timer
        - **manual**: Manual operator control
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: polytechnic-5way
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [mode]
              properties:
                mode:
                  type: string
                  enum: [auto, heuristic, fixed, manual]
                  example: "heuristic"
      responses:
        '200':
          description: Mode changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  previousMode:
                    type: string
                  newMode:
                    type: string
                  timestamp:
                    type: string
                    format: date-time

  /api/v1/intersections/{id}/manual:
    post:
      tags: [Intersections]
      summary: Manual signal control
      description: Manually override signal phase (requires manual mode)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: polytechnic-5way
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [phaseId, greenSeconds]
              properties:
                phaseId:
                  type: string
                  example: "north_through"
                greenSeconds:
                  type: integer
                  minimum: 10
                  maximum: 120
                  example: 30
      responses:
        '200':
          description: Manual override applied
        '400':
          description: Invalid phase or not in manual mode

  /api/v1/analytics/{id}/summary:
    get:
      tags: [Analytics]
      summary: Get traffic analytics summary
      description: Returns aggregated traffic analytics for a time period
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: polytechnic-5way
        - name: from
          in: query
          schema:
            type: string
            format: date-time
          example: "2025-09-25T00:00:00Z"
        - name: to
          in: query
          schema:
            type: string
            format: date-time
          example: "2025-09-25T23:59:59Z"
        - name: interval
          in: query
          schema:
            type: string
            enum: [hour, day, week, month]
            default: hour
      responses:
        '200':
          description: Analytics summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticsSummary'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      required: [error, timestamp]
      properties:
        error:
          type: string
          description: Error message
        correlationId:
          type: string
          description: Request correlation ID
        timestamp:
          type: string
          format: date-time
        details:
          type: object
          description: Additional error details

    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [ADMIN, OPERATOR, VIEWER]
        firstName:
          type: string
        lastName:
          type: string
        isActive:
          type: boolean
        lastLogin:
          type: string
          format: date-time

    DetectionData:
      type: object
      required: [intersectionId, approachId, timestamp, vehicleCounts, queueLengthMeters, avgWaitSeconds, fps, latencyMs, emergencyDetected]
      properties:
        intersectionId:
          type: string
          description: Unique intersection identifier
          example: "polytechnic-5way"
        approachId:
          type: string
          description: Approach direction identifier
          example: "north"
        timestamp:
          type: string
          format: date-time
          description: Detection timestamp in ISO 8601 format
        vehicleCounts:
          type: object
          description: Vehicle counts by type
          properties:
            car:
              type: integer
              minimum: 0
            bus:
              type: integer
              minimum: 0
            truck:
              type: integer
              minimum: 0
            twoWheeler:
              type: integer
              minimum: 0
            bicycle:
              type: integer
              minimum: 0
            autoRickshaw:
              type: integer
              minimum: 0
        queueLengthMeters:
          type: number
          format: float
          minimum: 0
          description: Queue length in meters
        avgWaitSeconds:
          type: number
          format: float
          minimum: 0
          description: Average wait time in seconds
        fps:
          type: number
          format: float
          minimum: 0
          description: Video processing frame rate
        latencyMs:
          type: integer
          minimum: 0
          description: Processing latency in milliseconds
        emergencyDetected:
          type: boolean
          description: Whether emergency vehicle was detected

    IntersectionState:
      type: object
      properties:
        intersectionId:
          type: string
        phase:
          type: string
          description: Current signal phase
        remainingSeconds:
          type: integer
          description: Remaining time in current phase
        queues:
          type: object
          description: Queue lengths by approach
          additionalProperties:
            type: integer
        throughputPerMin:
          type: integer
          description: Vehicles per minute throughput
        mode:
          type: string
          enum: [auto, heuristic, fixed, manual]
        controllerStatus:
          type: string
          enum: [active, inactive, error]
        emergencyActive:
          type: boolean
        lastUpdated:
          type: string
          format: date-time

    AnalyticsSummary:
      type: object
      properties:
        intersectionId:
          type: string
        period:
          type: object
          properties:
            from:
              type: string
              format: date-time
            to:
              type: string
              format: date-time
        aggregates:
          type: object
          properties:
            totalVehicles:
              type: integer
            avgWaitTime:
              type: number
            avgQueueLength:
              type: number
            throughputPerHour:
              type: number
            emergencyPreemptions:
              type: integer
        peakHours:
          type: array
          items:
            type: object
            properties:
              hour:
                type: integer
              vehicleCount:
                type: integer
        approachBreakdown:
          type: object
          additionalProperties:
            type: object
            properties:
              vehicles:
                type: integer
              avgWait:
                type: number

  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    NotFoundError:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    RateLimitError:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'